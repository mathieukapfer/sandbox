#ifndef _H_TESTDEFAULT_SM
#define _H_TESTDEFAULT_SM

/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : testDefault_sm.sm
 */


#include <statemap.h>

// Forward declarations.
class init;
class init_Waiting;
class init_Default;
class maintenance;
class maintenance_Maintenance;
class maintenance_Default;
class TestDefaultState;
class testDefaultContext;
class TestDefault;

class TestDefaultState :
    public statemap::State
{
public:

    TestDefaultState(const char *name, int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(testDefaultContext&) {};
    virtual void Exit(testDefaultContext&) {};

    virtual void goBack(testDefaultContext& context);
    virtual void goMaintenance(testDefaultContext& context);
    virtual void waiting(testDefaultContext& context);

protected:

    virtual void Default(testDefaultContext& context);
};

class init
{
public:

    static init_Waiting Waiting;
};

class init_Default :
    public TestDefaultState
{
public:

    init_Default(const char *name, int stateId)
    : TestDefaultState(name, stateId)
    {};

    virtual void goMaintenance(testDefaultContext& context);
};

class init_Waiting :
    public init_Default
{
public:
    init_Waiting(const char *name, int stateId)
    : init_Default(name, stateId)
    {};

    void waiting(testDefaultContext& context);
};

class maintenance
{
public:

    static maintenance_Maintenance Maintenance;
};

class maintenance_Default :
    public TestDefaultState
{
public:

    maintenance_Default(const char *name, int stateId)
    : TestDefaultState(name, stateId)
    {};

};

class maintenance_Maintenance :
    public maintenance_Default
{
public:
    maintenance_Maintenance(const char *name, int stateId)
    : maintenance_Default(name, stateId)
    {};

    void goBack(testDefaultContext& context);
};

class testDefaultContext :
    public statemap::FSMContext
{
public:

    testDefaultContext(TestDefault& owner)
    : FSMContext(init::Waiting),
      _owner(owner)
    {};

    testDefaultContext(TestDefault& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    TestDefault& getOwner() const
    {
        return (_owner);
    };

    TestDefaultState& getState() const
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return (dynamic_cast<TestDefaultState&>(*_state));
    };

    void goBack()
    {
        setTransition("goBack");
        (getState()).goBack(*this);
        setTransition(NULL);
    };

    void goMaintenance()
    {
        setTransition("goMaintenance");
        (getState()).goMaintenance(*this);
        setTransition(NULL);
    };

    void waiting()
    {
        setTransition("waiting");
        (getState()).waiting(*this);
        setTransition(NULL);
    };

private:

    TestDefault& _owner;
};


/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */

#endif // _H_TESTDEFAULT_SM
