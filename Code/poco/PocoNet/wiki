
====== TCP communication ======


=====  Lib C api =====

The basic C api to setup a tcp connection is
  * for a tcp client: ''socket()'', ''connect()'', ''send()'', ''recv()''
  * for a tcp server: ''socket()'', ''bind()'', ''listen()'', ''accept()'', ''send()'', ''recv()''

In addition, to monitor multiple sockets activities, the lib C provide: ''select'', ''poll'', ''epoll''

\\ 
\\ 
\\ 
\\ 
The steps involved in establishing a socket stream (TCP) are as follows:

<columns 100% 50% ->
 === on the client side ===


  *     Create a socket with the **socket()** system call
  *     Connect the socket to the address of the server using the **connect()** system call
  *     Send and receive data. There are a number of ways to do this, but the simplest is to use the **read()** ans **write()** system calls. (**send()** and **recv()** provide more control on a socket descriptor) 

<newcolumn>

===  on the server side === 

  *     Create a socket with the **socket()** system call
  *     Bind the socket to an address using the **bind()** system call. For a server socket on the Internet, an address consists of a port number on the host machine.
  *     Listen for connections with the **listen()** system call
  *     Accept a connection with the **accept()** system call. This call typically blocks until a client connects with the server.
  *     Send and receive data : use the **read()**, **write()** or **send()**, **recv()** system calls.

</columns>

=====  Simple client/server socket =====

An implementation in C of a simple client/server socket is provided in [[tcp-ip#Annexe|this Section]].


====== Poco implementation ======

source : http://pocoproject.org/slides/200-Network.pdf

{{ :code:poco-net.png?1000 |}}
===== Simple client/server socket =====

<columns 100% 50% 50%>

=== on the client side ===
<file c++ DemoSocketClient.cpp>
#include "Poco/Net/StreamSocket.h"
#include "Poco/Net/SocketStream.h"
#include "Poco/Net/SocketAddress.h"

#include <iostream>

int main(int argc, char** argv) {

  Poco::Net::SocketAddress adr("127.0.0.1", 8080);
  Poco::Net::StreamSocket ss;
  Poco::FIFOBuffer fifo(1024);

  // connect
  ss.connect(adr);

  // read
  ss.receiveBytes(fifo);
  std::cout << "I got the the message:" 
            << fifo.begin() << std::endl;

  // write
  Poco::Net::SocketStream str(ss);
  str << "Hello" << std::flush;

  return 0;
}

</file>

<newcolumn>
===  on the server side === 
<file c++ DemoSocketServer.cpp>
#include "Poco/Net/ServerSocket.h"
#include "Poco/Net/StreamSocket.h"
#include "Poco/Net/SocketStream.h"
#include "Poco/Net/SocketAddress.h"
#include <iostream>

int main(int argc, char** argv) {
  // does socket creation + bind + listen
  Poco::Net::ServerSocket srv(8080); 
  for (;;) {

      // get the connected socket ...
      //   ... to the first client in queue
      Poco::Net::StreamSocket ss = srv.acceptConnection();
      Poco::Net::SocketStream str(ss);

      // write
      str << "Hello guys" << std::flush;

      // read
      Poco::FIFOBuffer fifo(1024);
      ss.receiveBytes(fifo);
      std::cout << "I got the the message:" 
                << fifo.begin() << std::endl;
    }
  return 0;
}

</file>

</columns>

===== TCP Server =====

Our previous **server** implementation is limited to one client at a time.
Now we will create a thread by client


The class ''TCPServer'' does the thread creation thanks to a **factory** of **connection handler**.
  * A simple **Factory** is implemented thanks to the template ''TCPServerConnectionFactoryImpl'' provided by poco lib. 
  * The **connection handler** inherited from class ''TCPServerConnection'' define what to do with the server-side of the connected client.
 
<columns 100%>
<file c++ DemoTCPServer.cpp>
#include "Poco/Net/StreamSocket.h"
#include "Poco/Net/SocketStream.h"
#include "Poco/Net/StreamSocket.h"

#include "Poco/Net/TCPServerConnectionFactory.h"
#include "Poco/Net/TCPServerConnection.h"
#include "Poco/Net/TCPServer.h"
#include <iostream>

class MyTcpServerConnectionHandler : 
   public Poco::Net::TCPServerConnection {

 public:
  MyTcpServerConnectionHandler
    (const Poco::Net::StreamSocket& socket):
    TCPServerConnection(socket)
    {};
  virtual ~MyTcpServerConnectionHandler() {};

  // redefine run
  virtual void run() {
      Poco::Net::SocketStream str(this->socket());

      // write
      str << "Hello guys" << std::flush;

      // read
      Poco::FIFOBuffer fifo(1024);
      this->socket().receiveBytes(fifo);
      std::cout << "I got the the message:" 
                << fifo.begin() << std::endl;
  }
};

</file>

<newcolumn>

<file c++ DemoTCPServer-cont.cpp>
int main(int argc, char** argv) {

  Poco::Net::ServerSocket srs(8080); // does bind + listen

  // create a thread to handle each client
  Poco::Net::TCPServer srv
    (new Poco::Net::TCPServerConnectionFactoryImpl
     <MyTcpServerConnectionHandler>, srs);      

  // Start TCP server
  srv.start();

  // wait forever
  while(1) { sleep(1); }

  // Stop the TCP Server
  srv.stop();

  return 0;
}

</file>

</columns>
===== HTTP Server =====

As Tcp Server, the HTTP server expect a **factory** of **handler**.

The following classes exist: 
  * the class ''HTTPServerConnectionFactory'' inherited from ''TCPServerConnectionFactory''
  * the class ''HTTPServerConnection'' inherited from ''TCPServerConnection''

However, the HTTP handler is not based on connection but on HTTP request message. 
Hence, HTTP server expect
  * a **factory** inherited from class ''HTTPRequestHandlerFactory''
  * a **handler** inherited from class ''HTTPRequestHandler'' 

The role of ''HTTPRequestHandlerFactory'' is to create the good message handler based on URI.
The message handler inherited from  ''HTTPRequestHandler'' and redefine the method ''handleRequest''
<code>
  virtual void handleRequest
       (Poco::Net::HTTPServerRequest& request,  Poco::Net::HTTPServerResponse& response) 
</code>

<columns>

<file c++ DemoHTTPServer.cpp>
#include "Poco/Net/StreamSocket.h"
#include "Poco/Net/SocketStream.h"
#include "Poco/Net/StreamSocket.h"
#include "Poco/Net/ServerSocket.h"

#include "Poco/Net/HTTPRequestHandlerFactory.h"
#include "Poco/Net/HTTPRequestHandler.h"
#include "Poco/Net/HTTPServerRequest.h"
#include "Poco/Net/HTTPServerResponse.h"
#include "Poco/Net/HTTPServer.h"
#include "Poco/Net/HTTPServerParams.h"

#include <iostream>
#include <string>

class MyHandler: public Poco::Net::HTTPRequestHandler
{ 
 public:
  MyHandler(std::string helloMsg):
     _helloMsg(helloMsg) {};
  virtual ~MyHandler() {};

  // Define handler
  virtual void handleRequest(
    Poco::Net::HTTPServerRequest& request,
    Poco::Net::HTTPServerResponse& response) {
    {
      response.setChunkedTransferEncoding(true);
      response.setContentType("text/html");
      std::ostream& ostr = response.send();
      ostr << "<html><head><title>"
           << "My 1st POCO HTTP Server"
           << "</title></head>"
           << "<body><h1>"
           << _helloMsg
           << "</h1></body></html>";
    }
  }
private:
  std::string _helloMsg;
};
</file>

<newcolumn>

<file c++ DemoHTTPServer-cont.cpp>
class MyHTTPRequestHandlerFactory:
  public Poco::Net::HTTPRequestHandlerFactory {
 public:

  /// Creates a new request handler
  ///  for the given HTTP request.
  Poco::Net::HTTPRequestHandler* createRequestHandler(
    const Poco::Net::HTTPServerRequest& request)   {
      if (request.getURI() == "/")
        return new MyHandler("Hello root");
      else {
        return new MyHandler("Hello, you are: " + 
                              request.getURI());
      }
  }
};
</file>


<file c++ DemoHTTPServer-cont2 .cpp>
int main(int argc, char** argv) {
  Poco::Net::HTTPServerParams* pParams =
    new Poco::Net::HTTPServerParams;
  pParams->setMaxQueued(100);
  pParams->setMaxThreads(16);

  // do tcp bind and listen
  Poco::Net::ServerSocket srs(8080);

  // register client handler factory
  Poco::Net::HTTPServer srv
    (new MyHTTPRequestHandlerFactory, srs, pParams);

  // Start TCP server
  srv.start();

  // wait forever
  while (1) { sleep(1); }
  return 0;
}
</file>

</columns>

===== HTTP Client =====

<file c++ >

#include "Poco/Net/HTTPClientSession.h"
#include "Poco/Net/HTTPRequest.h"
#include "Poco/Net/HTTPResponse.h"

#include "Poco/StreamCopier.h"

#include <iostream>

int main(int argc, char *argv[]) {

  Poco::Net::HTTPClientSession s("127.0.0.1", 8080);
//s.setProxy("localhost", srv.port());
  Poco::Net::HTTPRequest request(Poco::Net::HTTPRequest::HTTP_GET, "/mypath");
  s.sendRequest(request);

  Poco::Net::HTTPResponse response;
  std::istream& rs = s.receiveResponse(response);
  Poco::StreamCopier::copyStream(rs, std::cout);
  return 0;
}

</file>

Tested with our HTTP server :

<code>
> ./DemoHTTPServer &
> ./DemoHTTPClient 
<html><head><title>My 1st POCO HTTP Server</title></head><body><h1>Hello, you are: /mypath</h1></body></html>mathieu@debian-mathieu:~/Code/poco/SocketServer$ 
</code>

===== WebSocket Server =====

==== Description ====
source : http://pocoproject.org/docs/Poco.Net.WebSocket.html

This class implements a WebSocket according to the WebSocket protocol specification in RFC 6455.\\ 
Both client-side and server-side WebSockets are supported.\\ 
Server-side WebSockets are usually created from within a HTTPRequestHandler.\\ 
Client-side WebSockets are created using a HTTPClientSession.\\ 

Note that special frames like PING must be handled at application level. In the case of a PING, a PONG message must be returned.

==== Example ====

Based on the previous HTTP Server, the following code have to be change:

  - Create a Websocket message handler
  - Create a new entry in the request factory message handler

=== Create a Websocket message handler  ===

  * Create a new handler inherited from ''Poco::Net::HTTPRequestHandler'' that contains a loop (in a dedicated thread or not) 
  * Before this loop, create a WebSocket instance that handle the RFC 6455 hand check. 
  * In the loop, read and write in this instance with ''ws.receiveFrame(...)'' and ''ws.sendFrame(...)''

<code C++>
class MyWebSocketHandler: public Poco::Net::HTTPRequestHandler {
 public:

  // Define handler
  virtual void handleRequest(
    Poco::Net::HTTPServerRequest& request,
    Poco::Net::HTTPServerResponse& response) {
    // handler websocket hand check
    Poco::Net::WebSocket ws(request, response);

    int flags = 0;
    int n = 0;
    std::cout << "Webserver msg processing start" << std::endl;
    do { //loop for connection handling
      char buffer[4096] = { 0 };
      int msgSize = 0;
      do { //loop for message
        std::cout << "Webserver msg processing waiting" << std::endl;
        n = ws.receiveFrame(buffer, sizeof(buffer), flags);
        std::cout << "Webserver msg processing recv:" << buffer << std::endl;
        msgSize +=n;
      } while ( n > 0 && ( (flags & 0xf0 /* masking op code bits*/) != Poco::Net::WebSocket::FRAME_FLAG_FIN) );
      // send reponse
      std::cout << "Webserver msg processing send:" << buffer << std::endl;
      ws.sendFrame(buffer, msgSize, Poco::Net::WebSocket::FRAME_TEXT );
    } while (  n > 0 && ( (flags & Poco::Net::WebSocket::FRAME_OP_BITMASK) != Poco::Net::WebSocket::FRAME_OP_CLOSE) );
    std::cout << "Webserver msg processing end" << std::endl;
  }

 private:
  std::string _helloMsg;
};
</code>

=== Create a new entry in the request factory message handler  ===

Add an entry in the ''HTTPRequestHandlerFactory'' as below:

<code C++>
class MyHTTPRequestHandlerFactory:
  public Poco::Net::HTTPRequestHandlerFactory {
 public:

  /// Creates a new request handler for the given HTTP request.
  Poco::Net::HTTPRequestHandler* createRequestHandler(
    const Poco::Net::HTTPServerRequest& request)   {

    // Web socket handler entry
    if (request.find("Upgrade") != request.end() &&
        Poco::icompare(request["Upgrade"], "websocket") == 0)
        return new MyWebSocketHandler();

      else if (request.getURI() == "/")
        return new MyHandler("Hello you are on the root");
      else {
        return new MyHandler("Hello, you are: " + request.getURI());
      }
  }
};

</code>

==== Test ====

As a websocket client, you can open the following file on your favorite browser

<file html websocketclient.html>
<html>
    <head>
        <title>WebSocket Echo Client</title>
    </head>
    <body>
        <h1>WebSocket Echo Client</h1>
        <p>
            <button onClick="initWebSocket();">Connect</button>
            <button onClick="stopWebSocket();">Disconnect</button>
            <button onClick="checkSocket();">State</button>
        </p>
        <p>
            <textarea id="debugTextArea" style="width:400px;height:200px;"></textarea>
        </p>
        <p>
            <input type="text" id="inputText" onkeydown="if(event.keyCode==13)sendMessage();"/>
            <button onClick="sendMessage();">Send</button>
        </p>

        <script type="text/javascript">
            var debugTextArea = document.getElementById("debugTextArea");
            function debug(message) {
                debugTextArea.value += message + "\n";
                debugTextArea.scrollTop = debugTextArea.scrollHeight;
            }

            function sendMessage() {
                var msg = document.getElementById("inputText").value;
                if ( websocket != null )
                {
                    document.getElementById("inputText").value = "";
                    websocket.send( msg );
                    console.log( "string sent :", '"'+msg+'"' );
                }
            }

            var wsUri = "ws://localhost:8080";
            var websocket = null;

            function initWebSocket() {
                try {
                    if (typeof MozWebSocket == 'function')
                        WebSocket = MozWebSocket;
                    if ( websocket && websocket.readyState == 1 )
                        websocket.close();
                    websocket = new WebSocket( wsUri );
                    websocket.onopen = function (evt) {
                        debug("CONNECTED");
                    };
                    websocket.onclose = function (evt) {
                        debug("DISCONNECTED");
                    };
                    websocket.onmessage = function (evt) {
                        console.log( "Message received :", evt.data );
                        debug( evt.data );
                    };
                    websocket.onerror = function (evt) {
                        debug('ERROR: ' + evt.data);
                    };
                } catch (exception) {
                    debug('ERROR: ' + exception);
                }
            }

            function stopWebSocket() {
                if (websocket)
                    websocket.close();
            }

            function checkSocket() {
                if (websocket != null) {
                    var stateStr;
                    switch (websocket.readyState) {
                        case 0: {
                            stateStr = "CONNECTING";
                            break;
                        }
                        case 1: {
                            stateStr = "OPEN";
                            break;
                        }
                        case 2: {
                            stateStr = "CLOSING";
                            break;
                        }
                        case 3: {
                            stateStr = "CLOSED";
                            break;
                        }
                        default: {
                            stateStr = "UNKNOW";
                            break;
                        }
                    }
                    debug("WebSocket state = " + websocket.readyState + " ( " + stateStr + " )");
                } else {
                    debug("WebSocket is null");
                }
            }
        </script>
    </body>
</html>

</file>




======  C implementation ======
=====  Simple TCP connection =====

<columns 100% <50% <50%>

=== on the client side ===
<file C client.c>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h> 

void error(const char *msg)
{
    perror(msg);
    exit(0);
}

int main(int argc, char *argv[])
{
    int sockfd, portno, n;
    struct sockaddr_in serv_addr;
    struct hostent *server;

    char buffer[256];
    if (argc < 3) {
       fprintf(stderr,"usage %s hostname port\n", 
               argv[0]);
       exit(0);
    }
    portno = atoi(argv[2]);
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0) 
        error("ERROR opening socket");
    server = gethostbyname(argv[1]);
    if (server == NULL) {
        fprintf(stderr,"ERROR, no such host\n");
        exit(0);
    }
    bzero((char *) &serv_addr, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    bcopy((char *)server->h_addr, 
         (char *)&serv_addr.sin_addr.s_addr,
         server->h_length);
    serv_addr.sin_port = htons(portno);
    if (connect(sockfd,(struct sockaddr *) &serv_addr,
                sizeof(serv_addr)) < 0) 
        error("ERROR connecting");
    printf("Please enter the message: ");
    bzero(buffer,256);
    fgets(buffer,255,stdin);
    n = write(sockfd,buffer,strlen(buffer));
    if (n < 0) 
         error("ERROR writing to socket");
    bzero(buffer,256);
    n = read(sockfd,buffer,255);
    if (n < 0) 
         error("ERROR reading from socket");
    printf("%s\n",buffer);
    close(sockfd);
    return 0;
}
</file>

<newcolumn>
===  on the server side === 
<file c server.c>
/* A simple server in the internet domain using TCP
   The port number is passed as an argument */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h> 
#include <sys/socket.h>
#include <netinet/in.h>

void error(const char *msg)
{
    perror(msg);
    exit(1);
}

int main(int argc, char *argv[])
{
     int sockfd, newsockfd, portno;
     socklen_t clilen;
     char buffer[256];
     struct sockaddr_in serv_addr, cli_addr;
     int n;
     if (argc < 2) {
         fprintf(stderr,"ERROR, no port provided\n");
         exit(1);
     }
     sockfd = socket(AF_INET, SOCK_STREAM, 0);
     if (sockfd < 0) 
        error("ERROR opening socket");
     bzero((char *) &serv_addr, sizeof(serv_addr));
     portno = atoi(argv[1]);
     serv_addr.sin_family = AF_INET;
     serv_addr.sin_addr.s_addr = INADDR_ANY;
     serv_addr.sin_port = htons(portno);
     if (bind(sockfd, (struct sockaddr *) &serv_addr,
              sizeof(serv_addr)) < 0) 
              error("ERROR on binding");
     listen(sockfd,5);
     clilen = sizeof(cli_addr);
     newsockfd = accept(sockfd, 
                 (struct sockaddr *) &cli_addr, 
                 &clilen);
     if (newsockfd < 0) 
          error("ERROR on accept");
     bzero(buffer,256);
     n = read(newsockfd,buffer,255);
     if (n < 0) error("ERROR reading from socket");
     printf("Here is the message: %s\n",buffer);
     n = write(newsockfd,"I got your message",18);
     if (n < 0) error("ERROR writing to socket");
     close(newsockfd);
     close(sockfd);
     return 0; 
}

</file>

</columns>


====== Tips ======
===== How to detect IP address change programmatically in Linux? =====

source: http://stackoverflow.com/questions/579783/how-to-detect-ip-address-change-programmatically-in-linux

=== With polling (the bad way) ===
In C, to get the current IP I use:

<file c read-local-ip.c>
int s;
    struct ifreq ifr = {};

    s = socket(PF_INET, SOCK_DGRAM, 0);

    strncpy(ifr.ifr_name, "eth0", sizeof(ifr.ifr_name));

    if (ioctl(s, SIOCGIFADDR, &ifr) >= 0)
        printf("%s\n",
          inet_ntoa(((struct sockaddr_in *)&ifr.ifr_addr)->sin_addr));
</file>

Replace "eth0" with the interface you're looking at. All you now need to do is poll for a change.

=== Without polling  (the good way) ===
here you go.. this does it without polling.

it only listens for RTM_NEWADDR but it should be easy to change to support RTM_DELADDR if you need

<file c main.c>
#include <stdio.h>
#include <string.h>
#include <netinet/in.h>
#include <linux/netlink.h>
#include <linux/rtnetlink.h>
#include <net/if.h>

int
main()
{
    struct sockaddr_nl addr;
    int sock, len;
    char buffer[4096];
    struct nlmsghdr *nlh;

    if ((sock = socket(PF_NETLINK, SOCK_RAW, NETLINK_ROUTE)) == -1) {
        perror("couldn't open NETLINK_ROUTE socket");
        return 1;
    }

    memset(&addr, 0, sizeof(addr));
    addr.nl_family = AF_NETLINK;
    addr.nl_groups = RTMGRP_IPV4_IFADDR;

    if (bind(sock, (struct sockaddr *)&addr, sizeof(addr)) == -1) {
        perror("couldn't bind");
        return 1;
    }

    nlh = (struct nlmsghdr *)buffer;
    while ((len = recv(sock, nlh, 4096, 0)) > 0) {
        while ((NLMSG_OK(nlh, len)) && (nlh->nlmsg_type != NLMSG_DONE)) {
            if (nlh->nlmsg_type == RTM_NEWADDR) {
                struct ifaddrmsg *ifa = (struct ifaddrmsg *) NLMSG_DATA(nlh);
                struct rtattr *rth = IFA_RTA(ifa);
                int rtl = IFA_PAYLOAD(nlh);

                while (rtl && RTA_OK(rth, rtl)) {
                    if (rth->rta_type == IFA_LOCAL) {
                        uint32_t ipaddr = htonl(*((uint32_t *)RTA_DATA(rth)));
                        char name[IFNAMSIZ];
                        if_indextoname(ifa->ifa_index, name);
                        printf("%s is now %d.%d.%d.%d\n",
                               name,
                               (ipaddr >> 24) & 0xff,
                               (ipaddr >> 16) & 0xff,
                               (ipaddr >> 8) & 0xff,
                               ipaddr & 0xff);
                    }
                    rth = RTA_NEXT(rth, rtl);
                }
            }
            nlh = NLMSG_NEXT(nlh, len);
        }
    }
    return 0;
}

</file>
Notes
  * The struct ifaddrmsg has a member ifa_index, which is the interface index of the interface the address is associated with
  * It should be noted in the manpage for these netlink API, it is recommended not to use this low level interface, but rather the libnetlink lib :  http://www.netfilter.org/projects/libmnl/
  



===== Nommer son PC en DHCP : =====

/etc/dhcp3/dhclient.conf 

send host-name "<hostname>";


===== Verifier le nom =====

nslookup 10.20.3.103